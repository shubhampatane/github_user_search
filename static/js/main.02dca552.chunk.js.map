{"version":3,"sources":["logo.svg","compo/DisplayUser.js","compo/DisplayRepos.js","compo/GithubApi.js","compo/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayUser","props","hire","data","hireable","className","src","avatar_url","login","id","public_repos","href","html_url","target","company","followers","following","DisplayRepos","arrData","this","data_rep","listItems","map","items","name","description","language","owner","size","forks","stargazers_count","watchers_count","default_branch","console","log","Component","GithubApi","usernameChangeHandler","event","setState","username","value","showrepostate","datas","listRepos","showList","getUser","fetch","state","then","response","json","first","repos","setTimeout","s","getRepos","exists_data","dis","type","placeholder","onChange","onClick","message","color","disabled","Header","style","fontWeight","fontFamily","fontSize","textTransform","textShadow","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.02dca552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nconst DisplayUser = (props) =>{\r\n    const show_reps = false\r\n    const h = props.data.hireable\r\n    let hire = \"\"\r\n    if(h){\r\n        hire = \"Yes\"\r\n    }\r\n    else{\r\n        hire = \"No\"\r\n    }\r\n    return(\r\n        <div>\r\n            <img className = \"userImage\" src = {props.data.avatar_url} /><br /><br />   \r\n            <center>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th>\r\n                        <label>User Name</label>\r\n                    </th>\r\n                    <th>\r\n                        {props.data.login}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <label>Unique ID</label>\r\n                    </th>\r\n                    <th>\r\n                        {props.data.id}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <label>Public Repos</label>\r\n                    </th>\r\n                    <th>\r\n                    {props.data.public_repos}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        User Url\r\n                    </th>\r\n                    <th>\r\n                        <a href = {props.data.html_url} target = \"_blank\">{props.data.html_url}</a>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Company\r\n                    </th>\r\n                    <th>\r\n                        {props.data.company}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Hireable\r\n                    </th>\r\n                    <th>\r\n                        {hire}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Followers\r\n                    </th>\r\n                    <th>\r\n                        {props.data.followers}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Following\r\n                    </th>\r\n                    <th>\r\n                        {props.data.following}\r\n                    </th>\r\n                </tr>\r\n                </tbody>\r\n            </table></center>\r\n            <br />\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayUser;","import React, { Component } from 'react';\r\n\r\nclass DisplayRepos extends Component{\r\n    \r\n    render(){\r\n        let arrData = this.props.data_rep\r\n        const listItems = arrData.map(items => {\r\n            return(\r\n            <div>\r\n                {/* <h1>{items.name}</h1><br /> */}\r\n                <center>\r\n                <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th>\r\n                        <label>Repo Name</label>\r\n                    </th>\r\n                    <th>\r\n                        {items.name}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <label>Description</label>\r\n                    </th>\r\n                    <th>\r\n                        {items.description}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Language\r\n                    </th>\r\n                    <th>\r\n                        {items.language}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <label>Repo Url</label>\r\n                    </th>\r\n                    <th>\r\n                        <a href ={items.owner.html_url} target = \"_blank\">{items.owner.html_url}</a>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Size\r\n                    </th>\r\n                    <th>\r\n                        {items.size}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <label>Forks</label>\r\n                    </th>\r\n                    <th>\r\n                        {items.forks}\r\n                    </th>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <th>\r\n                        Stars\r\n                    </th>\r\n                    <th>\r\n                        {items.stargazers_count}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Watchers\r\n                    </th>\r\n                    <th>\r\n                        {items.watchers_count}\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        Default Branch\r\n                    </th>\r\n                    <th>\r\n                        {items.default_branch}\r\n                    </th>\r\n                </tr>\r\n                </tbody>\r\n            </table></center>\r\n            <br />\r\n            </div>\r\n            )\r\n        });\r\n            console.log(arrData)\r\n        return(\r\n            <div>{listItems}</div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayRepos;","import React, { Component } from 'react';\r\nimport DisplayUser from \"./DisplayUser\"\r\nimport DisplayRepos from \"./DisplayRepos\"\r\n\r\nclass GithubApi extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            username: \"\",\r\n            datas : {},\r\n            first : true,\r\n            repos : {},\r\n            showrepostate : true,\r\n            listRepos : false\r\n        };\r\n\r\n    }\r\n\r\n    usernameChangeHandler = (event) => {\r\n        this.setState(\r\n            {username : event.target.value}\r\n        );\r\n        this.setState(\r\n            {showrepostate : true}\r\n        );\r\n        this.setState(\r\n            {datas : {}}\r\n        );\r\n        this.setState(\r\n            {listRepos : false}\r\n        );\r\n    };\r\n\r\n    showList = () => {\r\n        this.setState(\r\n            {listRepos : true}\r\n        );\r\n    }\r\n    \r\n\r\n    getUser = () => {\r\n        fetch(`https://api.github.com/users/${this.state.username}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            \r\n            this.setState(\r\n                {datas : data}\r\n            )\r\n          });\r\n          this.setState(\r\n            {first : false},\r\n        );\r\n\r\n        if(1){\r\n            fetch(`https://api.github.com/users/${this.state.username}/repos`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState(\r\n                    {repos : data}\r\n                )\r\n            });\r\n        }\r\n\r\n        setTimeout(s => {\r\n            if(this.state.datas.public_repos>0){\r\n                    this.setState(\r\n                        {showrepostate : false}\r\n                    );\r\n            }\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    getRepos = () => {\r\n        if(1){\r\n            fetch(`https://api.github.com/users/${this.state.username}/repos`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState(\r\n                    {repos : data}\r\n                )\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    \r\n    \r\n\r\n    render() {\r\n        let exists_data = this.state.datas.login\r\n        let exist_user = this.state.username\r\n        let dis = <p></p>\r\n        // if(!this.state.first){\r\n        //     dis = <font color = \"red\" ><small>Invalid User</small></font>\r\n        // }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <input type = \"text\" \r\n                name = \"username\"\r\n                placeholder = \"Enter Github Username\"\r\n                onChange = {this.usernameChangeHandler}\r\n                />\r\n\r\n                <center>\r\n                <input type = \"button\"\r\n                name = \"getuser\" \r\n                value = \"Search User\"\r\n                className=\"buttonsearch\"\r\n                onClick = {this.getUser} /></center>\r\n\r\n                {this.state.datas.message === \"Not Found\" ? <font color = \"red\" ><small>UserName Not Found</small></font> : null}\r\n                {/* console.log(this.state) */}\r\n                {exists_data ? <DisplayUser data = {this.state.datas}/> : dis}\r\n\r\n                <center>\r\n                <input type = \"button\"\r\n                name = \"getrepos\" \r\n                value = \"Show Repos\"\r\n                className = \"button4\"\r\n                disabled = {this.state.showrepostate}\r\n                onClick = {this.showList} /></center>\r\n                {this.state.listRepos ? <DisplayRepos data_rep = {this.state.repos}/> : dis}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GithubApi;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    const st = {\r\n            color: \"#343434\",\r\n            fontWeight: 'normal',\r\n            fontFamily: 'Ultra',\r\n            fontSize: '36px',\r\n            textTransform: 'uppercase',\r\n            textShadow: '0 2px white, 0 3px #777',\r\n            textAlign: \"center\",\r\n    }\r\n    return(\r\n        <div style = {st}>\r\n            Github User Search\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GithubApi from \"./compo/GithubApi\"\nimport Header from \"./compo/Header\"\n\nfunction App() {\n  return(\n      <div>\n        <Header />\n        <GithubApi />\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}